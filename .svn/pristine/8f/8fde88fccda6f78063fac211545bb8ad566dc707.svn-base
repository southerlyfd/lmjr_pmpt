package com.pmpt.controller;

import java.util.Map;

import javax.annotation.Resource;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.pmpt.common.ActionLogClass;
import com.pmpt.common.ActionLogCode;
import com.pmpt.common.LocaleMessageSourceService;
import com.pmpt.common.MainUtilityTools;
import com.pmpt.common.Response;
import com.pmpt.common.ResponseStatusCode;
import com.pmpt.entities.Address;
import com.pmpt.entities.Interest;
import com.pmpt.entities.Transport;
import com.pmpt.entities.enums.DefaultAddr;
import com.pmpt.entities.enums.Status;
import com.pmpt.interfaces.Service.ActionLogService;
import com.pmpt.interfaces.Service.HomeService;
import com.pmpt.interfaces.Service.VerificationCodeService;

/**
 * @ClassName: HomeController
 * @Description: 我的模块
 * @author: 汪洋
 * @date: 2017年8月10日 下午4:59:29
 */
@RestController
@RequestMapping("/home")
public class HomeController {

	@Autowired
	private HomeService homeService;

	@Autowired
	private VerificationCodeService verifiCodeService;

	@Resource
	private LocaleMessageSourceService localeMsgService;

	@Autowired
	private ActionLogService actionLogService;

	/**
	 * 新增收货地址
	 * 
	 * @param token
	 * @param name
	 * @param mobile
	 * @param province
	 * @param detail
	 * @return
	 */
	@RequestMapping("/addAddr")
	public Response addAddr(String token, String name, String mobile, String province, String detail) {
		Integer loginAcId = Integer.valueOf(verifiCodeService.getRedisMap(token, "loginAccoutId"));
		try {
			homeService.save(loginAcId,
					new Address(name, mobile, province, detail, DefaultAddr.NOTDEFAULTADDR.getKey()));
			actionLogService.addLog(null, ActionLogClass.INFO.getCode(), ActionLogCode.HOME.getCode(), "LM25119", null,
					"添加收货地址成功");
		} catch (Exception e) {
			MainUtilityTools.catchException(e, this.getClass(), "");
			Response res = new Response();
			res.setStatus(ResponseStatusCode.EXCEPTION.getCode());
			res.setMessage(localeMsgService.getMessage("insertion.exception"));
			return res;
		}
		return new Response(ResponseStatusCode.SUCCESS.getCode(), localeMsgService.getMessage("success"), null, null);
	}

	/**
	 * 修改收货地址
	 * 
	 * @param token
	 * @param id
	 * @param name
	 * @param mobile
	 * @param province
	 * @param detail
	 * @return
	 */
	@RequestMapping("/updateAddr")
	public Response updateAddr(String token, Integer id, String name, String mobile, String province, String detail) {
		try {
			homeService.updateAddr(id, name, mobile, province, detail);
			actionLogService.addLog(null, ActionLogClass.INFO.getCode(), ActionLogCode.HOME.getCode(), "LM25120", null,
					"修改收货地址成功");
		} catch (Exception e) {
			MainUtilityTools.catchException(e, this.getClass(), "修改收货地址失败");
			Response res = new Response();
			res.setStatus(ResponseStatusCode.EXCEPTION.getCode());
			res.setMessage(localeMsgService.getMessage("update.exception"));
			return res;
		}
		return new Response(ResponseStatusCode.SUCCESS.getCode(), "修改收货地址成功", null, null);
	}

	/**
	 * 删除收货地址
	 * 
	 * @param token
	 * @param id
	 * @return
	 */
	@RequestMapping("/removeAddr")
	public Response removeAddr(String token, Integer id) {
		try {
			homeService.delAddr(id);
			actionLogService.addLog(null, ActionLogClass.INFO.getCode(), ActionLogCode.HOME.getCode(), "LM25240", null,
					"删除收货地址成功");
		} catch (Exception e) {
			MainUtilityTools.catchException(e, this.getClass(), "删除收货地址失败");
			Response res = new Response();
			res.setStatus(ResponseStatusCode.EXCEPTION.getCode());
			res.setMessage(localeMsgService.getMessage("delete.exception"));
			return res;
		}
		return new Response(ResponseStatusCode.SUCCESS.getCode(), "删除收货地址成功", null, null);
	}

	/**
	 * 设置默认收货地址
	 * 
	 * @param token
	 * @param id
	 * @return
	 */
	@RequestMapping("/defaultAddr")
	public Response defaultAddr(String token, Integer id) {
		Integer loginAcId = Integer.valueOf(verifiCodeService.getRedisMap(token, "loginAccoutId"));
		try {
			homeService.setDefaultAddr(loginAcId, id);
			actionLogService.addLog(null, ActionLogClass.INFO.getCode(), ActionLogCode.HOME.getCode(), "LM25121", null,
					"设置默认收货地址成功");
		} catch (Exception e) {
			MainUtilityTools.catchException(e, this.getClass(), "设置默认收货地址失败");
			Response res = new Response();
			res.setStatus(ResponseStatusCode.EXCEPTION.getCode());
			res.setMessage(localeMsgService.getMessage("update.exception"));
			return res;
		}
		return new Response(ResponseStatusCode.SUCCESS.getCode(), "设置默认收货地址成功", null, null);
	}

	/**
	 * 根据ID查询收货地址-修改
	 * 
	 * @param token
	 * @return
	 */
	@RequestMapping("/findAddrById")
	public Response findAddrById(String token, Integer id) {
		Map<String, Object> dataMap = null;
		try {
			dataMap = homeService.findAddrById(id);
			actionLogService.addLog(null, ActionLogClass.INFO.getCode(), ActionLogCode.HOME.getCode(), "LM25354", null,
					"根据ID查询收货地址成功");
		} catch (Exception e) {
			MainUtilityTools.catchException(e, this.getClass(), "根据ID查询收货地址失败");
			Response res = new Response();
			res.setStatus(ResponseStatusCode.EXCEPTION.getCode());
			res.setMessage(localeMsgService.getMessage("query.exception"));
			res.setObject(dataMap);
			return res;
		}
		return new Response(ResponseStatusCode.SUCCESS.getCode(), "根据ID查询收货地址成功", dataMap, null);
	}

	/**
	 * 查询收货地址
	 * 
	 * @param token
	 * @return
	 */
	@RequestMapping("/findAddr")
	public Response findAddr(String token) {
		List<Object> addrList = null;
		Integer loginAcId = Integer.valueOf(verifiCodeService.getRedisMap(token, "loginAccoutId"));
		try {
			addrList = homeService.findAddrByLoginAcId(loginAcId);
			actionLogService.addLog(null, ActionLogClass.INFO.getCode(), ActionLogCode.HOME.getCode(), "LM25241", null,
					"查询收货地址成功");
		} catch (Exception e) {
			MainUtilityTools.catchException(e, this.getClass(), "查询收货地址失败");
			Response res = new Response();
			res.setStatus(ResponseStatusCode.EXCEPTION.getCode());
			res.setMessage(localeMsgService.getMessage("query.exception"));
			res.setObject(addrList);
			return res;
		}
		return new Response(ResponseStatusCode.SUCCESS.getCode(), "查询收货地址成功", addrList, null);
	}

	/**
	 * 修改昵称
	 * 
	 * @param token
	 * @param nickName
	 * @return
	 */
	@RequestMapping("/changeNickName")
	public Response changeNickName(String token, String nickName) {
		Integer loginAcId = Integer.valueOf(verifiCodeService.getRedisMap(token, "loginAccoutId"));
		try {
			homeService.changeNickName(nickName, loginAcId);
			actionLogService.addLog(null, ActionLogClass.INFO.getCode(), ActionLogCode.HOME.getCode(), "LM25249", null,
					"修改昵称成功");
		} catch (Exception e) {
			MainUtilityTools.catchException(e, this.getClass(), "修改昵称失败");
			Response res = new Response();
			res.setStatus(ResponseStatusCode.EXCEPTION.getCode());
			res.setMessage(localeMsgService.getMessage("update.exception"));
			res.setObject(nickName);
			return res;
		}
		return new Response(ResponseStatusCode.SUCCESS.getCode(), "修改昵称成功", nickName, null);
	}

	/**
	 * 查询个人信息/查询昵称
	 * 
	 * @param token
	 * @return
	 */
	@RequestMapping("/findLoginInfo")
	public Response findLoginInfo(String token) {
		Map<String, Object> map = null;
		Integer loginAcId = Integer.valueOf(verifiCodeService.getRedisMap(token, "loginAccoutId"));
		try {
			map = homeService.findLoginInfo(loginAcId);
			actionLogService.addLog(null, ActionLogClass.INFO.getCode(), ActionLogCode.HOME.getCode(), "LM25251", null,
					"查询个人信息成功");
		} catch (Exception e) {
			MainUtilityTools.catchException(e, this.getClass(), "查询个人信息失败");
			Response res = new Response();
			res.setStatus(ResponseStatusCode.EXCEPTION.getCode());
			res.setMessage(localeMsgService.getMessage("query.exception"));
			res.setObject(map);
			return res;
		}
		return new Response(ResponseStatusCode.SUCCESS.getCode(), "查询个人信息成功", map, null);
	}

	/**
	 * 查询"我的"
	 * 
	 * @param token
	 * @return
	 */
	@RequestMapping("/findMeByLoginAcId")
	public Response findMeByLoginAcId(String token) {
		Map<String, Object> map = null;
		Integer loginAcId = Integer.valueOf(verifiCodeService.getRedisMap(token, "loginAccoutId"));
		try {
			map = homeService.findMeByLoginAcId(loginAcId);
			actionLogService.addLog(null, ActionLogClass.INFO.getCode(), ActionLogCode.HOME.getCode(), "LM25292", null,
					"查询我的模块成功");
		} catch (Exception e) {
			MainUtilityTools.catchException(e, this.getClass(), "查询我的模块失败");
			Response res = new Response();
			res.setStatus(ResponseStatusCode.EXCEPTION.getCode());
			res.setMessage(localeMsgService.getMessage("query.exception"));
			res.setObject(map);
			return res;
		}
		return new Response(ResponseStatusCode.SUCCESS.getCode(), "查询我的模块成功", map, null);
	}

	/**
	 * 修改头像
	 * 
	 * @param token
	 * @param file
	 * @return
	 */
	@RequestMapping("/changeHeadImg")
	public Response changeHeadImg(String token, MultipartFile file) {
		String fileURl = null;
		Integer loginAcId = Integer.valueOf(verifiCodeService.getRedisMap(token, "loginAccoutId"));
		try {
			fileURl = MainUtilityTools.saveFile(file);
			homeService.changeHeadImg(fileURl, loginAcId);
			actionLogService.addLog(null, ActionLogClass.INFO.getCode(), ActionLogCode.HOME.getCode(), "LM25250", null,
					"修改头像成功");
		} catch (Exception e) {
			MainUtilityTools.catchException(e, this.getClass(), "修改头像失败");
			Response res = new Response();
			res.setStatus(ResponseStatusCode.EXCEPTION.getCode());
			res.setMessage(localeMsgService.getMessage("update.exception"));
			return res;
		}
		return new Response(ResponseStatusCode.SUCCESS.getCode(), "修改头像成功", null, null);
	}

	/**
	 * 查询我的收藏订单(等待拍卖、正在拍、已拍完)
	 * 
	 * @param token
	 * @param billStatus
	 * @return
	 */
	@RequestMapping("/findCollection")
	public Response findCollections(String token, String billStatus) {
		List<Map<String, Object>> dataList = null;
		Integer loginAcId = Integer.valueOf(verifiCodeService.getRedisMap(token, "loginAccoutId"));
		try {
			dataList = homeService.findCollectBillsById(loginAcId, billStatus);
			actionLogService.addLog(null, ActionLogClass.INFO.getCode(), ActionLogCode.HOME.getCode(), "LM25275", null,
					"查询收藏订单成功");
		} catch (Exception e) {
			MainUtilityTools.catchException(e, this.getClass(), "查询我的收藏失败");
			Response res = new Response();
			res.setStatus(ResponseStatusCode.EXCEPTION.getCode());
			res.setMessage(localeMsgService.getMessage("query.exception"));
			res.setObject(dataList);
			return res;
		}
		return new Response(ResponseStatusCode.SUCCESS.getCode(), "查询我的收藏成功", dataList, null);
	}

	/**
	 * 删除我的收藏
	 * 
	 * @param token
	 * @param billId
	 * @return
	 */
	@RequestMapping("/delCollection")
	public Response delCollection(String token, Integer billId) {
		try {
			homeService.delBillById(billId);
			actionLogService.addLog(null, ActionLogClass.INFO.getCode(), ActionLogCode.HOME.getCode(), "LM25240", null,
					"删除收藏成功");
		} catch (Exception e) {
			MainUtilityTools.catchException(e, this.getClass(), "删除收藏订单失败");
			Response res = new Response();
			res.setStatus(ResponseStatusCode.EXCEPTION.getCode());
			res.setMessage(localeMsgService.getMessage("delete.exception"));
			return res;
		}
		return new Response(ResponseStatusCode.SUCCESS.getCode(), "删除收藏订单成功", null, null);
	}

	/**
	 * 删除我的提醒
	 * 
	 * @param token
	 * @param billId
	 * @return
	 */
	@RequestMapping("/delRemind")
	public Response delRemind(String token, Integer billId) {
		try {
			homeService.delBillById(billId);
			actionLogService.addLog(null, ActionLogClass.INFO.getCode(), ActionLogCode.HOME.getCode(), "LM25240", null,
					"删除提醒订单成功");
		} catch (Exception e) {
			MainUtilityTools.catchException(e, this.getClass(), "删除提醒订单失败");
			Response res = new Response();
			res.setStatus(ResponseStatusCode.EXCEPTION.getCode());
			res.setMessage(localeMsgService.getMessage("delete.exception"));
			return res;
		}
		return new Response(ResponseStatusCode.SUCCESS.getCode(), "删除提醒订单成功", null, null);
	}

	/**
	 * 查询我买到的订单列表(拍卖中、待付款、待收货、已结束)
	 * 
	 * @param token
	 * @param billStatus
	 * @return
	 */
	@RequestMapping("/findBoughtBills")
	public Response findBoughtBills(String token, String billStatus) {
		List<Map<String, Object>> dataList = null;
		Integer loginAcId = Integer.valueOf(verifiCodeService.getRedisMap(token, "loginAccoutId"));
		try {
			dataList = homeService.findBoughtBillsById(loginAcId, billStatus);
			actionLogService.addLog(null, ActionLogClass.INFO.getCode(), ActionLogCode.HOME.getCode(), "LM25131", null,
					"查询已买到的订单成功");
		} catch (Exception e) {
			MainUtilityTools.catchException(e, this.getClass(), "查询我购买的订单失败");
			Response res = new Response();
			res.setStatus(ResponseStatusCode.EXCEPTION.getCode());
			res.setMessage(localeMsgService.getMessage("query.exception"));
			res.setObject(dataList);
			return res;
		}
		return new Response(ResponseStatusCode.SUCCESS.getCode(), "查询我购买的订单成功", dataList, null);
	}

	/**
	 * 查询我发布的订单列表(待发布、已发布、待发货、已结束)
	 * 
	 * @param token
	 * @param billStatus
	 * @return
	 */
	@RequestMapping("/findPubBills")
	public Response findPubBills(String token, String billStatus) {
		List<Map<String, Object>> dataList = null;
		Integer loginAcId = Integer.valueOf(verifiCodeService.getRedisMap(token, "loginAccoutId"));
		try {
			dataList = homeService.findPubBillsById(loginAcId, billStatus);
			actionLogService.addLog(null, ActionLogClass.INFO.getCode(), ActionLogCode.HOME.getCode(), "LM25128", null,
					"查询已发布的订单成功");
		} catch (Exception e) {
			MainUtilityTools.catchException(e, this.getClass(), "查询我的发布的订单失败");
			Response res = new Response();
			res.setStatus(ResponseStatusCode.EXCEPTION.getCode());
			res.setMessage(localeMsgService.getMessage("query.exception"));
			res.setObject(dataList);
			return res;
		}
		return new Response(ResponseStatusCode.SUCCESS.getCode(), "查询我的发布的订单成功", dataList, null);
	}

	/**
	 * 收藏商品
	 * 
	 * @param token
	 * @param goodId
	 * @return
	 */
	@RequestMapping("/colletcBills")
	public Response colletcBills(String token, Integer goodId) {
		Integer loginAcId = Integer.valueOf(verifiCodeService.getRedisMap(token, "loginAccoutId"));
		try {
			if (!homeService.isCollected(loginAcId, goodId)) {
				homeService.collect(loginAcId, goodId);
				actionLogService.addLog(null, ActionLogClass.INFO.getCode(), ActionLogCode.HOME.getCode(), "LM25135",
						null, "收藏商品成功");
			} else {
				actionLogService.addLog(null, ActionLogClass.INFO.getCode(), ActionLogCode.HOME.getCode(), "LM25135",
						null, "重复收藏商品");
				return new Response(ResponseStatusCode.SUCCESS.getCode(), "该商品已经被收藏过", null, null);
			}
		} catch (Exception e) {
			MainUtilityTools.catchException(e, this.getClass(), "收藏订单商品失败");
			Response res = new Response();
			res.setStatus(ResponseStatusCode.EXCEPTION.getCode());
			res.setMessage(localeMsgService.getMessage("colletcBills.exception"));
			return res;
		}
		return new Response(ResponseStatusCode.SUCCESS.getCode(), "收藏订单商品成功", null, null);
	}

	/**
	 * 设置未开始或已开始拍卖的商品提醒
	 * 
	 * @param token
	 * @param goodId
	 * @return
	 */
	@RequestMapping("/remindBills")
	public Response remindBills(String token, Integer goodId) {
		Integer loginAcId = Integer.valueOf(verifiCodeService.getRedisMap(token, "loginAccoutId"));
		try {
			if (!homeService.isReminded(loginAcId, goodId)) {
				homeService.remind(loginAcId, goodId);
				actionLogService.addLog(null, ActionLogClass.INFO.getCode(), ActionLogCode.HOME.getCode(), "LM25311",
						null, "设置商品提醒成功");
			} else {
				actionLogService.addLog(null, ActionLogClass.INFO.getCode(), ActionLogCode.HOME.getCode(), "LM25311",
						null, "重复设置商品提醒");
				return new Response(ResponseStatusCode.SUCCESS.getCode(), "该商品已经被设置提醒过", null, null);
			}
		} catch (Exception e) {
			MainUtilityTools.catchException(e, this.getClass(), "设置商品提醒失败");
			Response res = new Response();
			res.setStatus(ResponseStatusCode.EXCEPTION.getCode());
			res.setMessage(localeMsgService.getMessage("remindBills.exception"));
			return res;
		}
		return new Response(ResponseStatusCode.SUCCESS.getCode(), "设置商品提醒成功", null, null);
	}

	/**
	 * 查询我的提醒订单列表-只提醒参拍的(即将开拍、已开拍、已结束)
	 * 
	 * @param token
	 * @param billStatus
	 * @return
	 */
	@RequestMapping("/findRemindBills")
	public Response findRemindBills(String token, String billStatus) {
		List<Map<String, Object>> dataList = null;
		Integer loginAcId = Integer.valueOf(verifiCodeService.getRedisMap(token, "loginAccoutId"));
		try {
			dataList = homeService.findRemBillsById(loginAcId, billStatus);
			actionLogService.addLog(null, ActionLogClass.INFO.getCode(), ActionLogCode.HOME.getCode(), "LM25140", null,
					"查询我的提醒订单成功");
		} catch (Exception e) {
			MainUtilityTools.catchException(e, this.getClass(), "查询我的提醒订单失败");
			Response res = new Response();
			res.setStatus(ResponseStatusCode.EXCEPTION.getCode());
			res.setMessage(localeMsgService.getMessage("query.exception"));
			res.setObject(dataList);
			return res;
		}
		return new Response(ResponseStatusCode.SUCCESS.getCode(), "查询我的提醒订单成功", dataList, null);
	}

	/**
	 * 查询发货订单信息(发货前/发货后)/查询卖家信息
	 */
	@RequestMapping("/findSGoodsBill")
	public Response findSGoodsBill(String token, Integer billId) {
		Map<String, Object> dataMap = null;
		try {
			dataMap = homeService.findSGoodsBill(billId);
			List<Transport> transportList = homeService.findTransportByBillId(billId);
			List<String> picList = homeService.findFirstPicByBillId(billId);
			dataMap.put("goodsPic", picList.get(0));
			dataMap.put("transportList", transportList);
			actionLogService.addLog(null, ActionLogClass.INFO.getCode(), ActionLogCode.HOME.getCode(), "LM25313", null,
					"查询发货订单成功");
		} catch (Exception e) {
			MainUtilityTools.catchException(e, this.getClass(), "查询发货订单失败");
			Response res = new Response();
			res.setStatus(ResponseStatusCode.EXCEPTION.getCode());
			res.setObject(dataMap);
			res.setMessage(localeMsgService.getMessage("query.exception"));
			return res;
		}
		return new Response(ResponseStatusCode.SUCCESS.getCode(), "查询发货订单成功", dataMap, null);
	}

	/**
	 * 确认发货
	 */
	@RequestMapping("/sendGoods")
	public Response sendGoods(@RequestBody List<Transport> transportList, String token, Integer billId) {
		try {
			homeService.sendGoods(billId, transportList);
			// 修改订单状态
			homeService.updateBillStatus(Status.DELIVERY.getKey(), billId);
			actionLogService.addLog(null, ActionLogClass.INFO.getCode(), ActionLogCode.HOME.getCode(), "LM25314", null,
					"确认发货成功");
		} catch (Exception e) {
			MainUtilityTools.catchException(e, this.getClass(), "确认发货失败");
			Response res = new Response();
			res.setStatus(ResponseStatusCode.EXCEPTION.getCode());
			res.setMessage(localeMsgService.getMessage("query.exception"));
			return res;
		}
		return new Response(ResponseStatusCode.SUCCESS.getCode(), "确认发货成功", null, null);
	}

	/**
	 * 查询确认付款订单(付款前/付款后 我参拍的-待付款)
	 * 
	 * @param token
	 * @param billId
	 * @return
	 */
	@RequestMapping("/findPayBill")
	public Response findPayBill(String token, Integer billId) {
		Map<String, Object> dataMap = null;
		try {
			dataMap = homeService.findPayBillById(billId);
			List<String> picList = homeService.findFirstPicByBillId(billId);
			dataMap.put("goodsPic", picList.get(0));
			actionLogService.addLog(null, ActionLogClass.INFO.getCode(), ActionLogCode.HOME.getCode(), "LM25316", null,
					"查询确认付款订单成功");
		} catch (Exception e) {
			MainUtilityTools.catchException(e, this.getClass(), "查询确认付款订单失败");
			Response res = new Response();
			res.setStatus(ResponseStatusCode.EXCEPTION.getCode());
			res.setObject(dataMap);
			res.setMessage(localeMsgService.getMessage("query.exception"));
			return res;
		}
		return new Response(ResponseStatusCode.SUCCESS.getCode(), "查询确认付款订单成功", dataMap, null);
	}

	/**
	 * 确认收货(卖家发货后15个工作日后，没有点击确认收货，自动收货)
	 * 
	 * @param token
	 * @param billId
	 * @return
	 */
	@RequestMapping("/recvGoods")
	public Response recvGoods(String token, Integer billId) {
		try {
			// TODO 是否需要先查后改？？？？
			// 修改订单状态
			homeService.updateBillStatus(Status.TAKEDELIVERY.getKey(), billId);
			actionLogService.addLog(null, ActionLogClass.INFO.getCode(), ActionLogCode.HOME.getCode(), "LM25320", null,
					"确认收货成功");
		} catch (Exception e) {
			MainUtilityTools.catchException(e, this.getClass(), "确认收货失败");
			Response res = new Response();
			res.setStatus(ResponseStatusCode.EXCEPTION.getCode());
			res.setMessage(localeMsgService.getMessage("query.exception"));
			return res;
		}
		return new Response(ResponseStatusCode.SUCCESS.getCode(), "确认收货成功", null, null);
	}

	/**
	 * 查询商品详情
	 * 
	 * @param token
	 * @param goodId
	 * @return
	 */
	@RequestMapping("/findGoodsInfo")
	public Response findGoodsInfo(String token, Integer goodId) {
		Map<String, Object> dataMap = null;
		Integer loginAcId = Integer.valueOf(verifiCodeService.getRedisMap(token, "loginAccoutId"));
		try {
			dataMap = homeService.findGoodsInfo(goodId, loginAcId);
			actionLogService.addLog(null, ActionLogClass.INFO.getCode(), ActionLogCode.HOME.getCode(), "LM25134", null,
					"查询商品详情成功");
		} catch (Exception e) {
			MainUtilityTools.catchException(e, this.getClass(), "查询商品详情失败");
			Response res = new Response();
			res.setStatus(ResponseStatusCode.EXCEPTION.getCode());
			res.setObject(dataMap);
			res.setMessage(localeMsgService.getMessage("query.exception"));
			return res;
		}
		return new Response(ResponseStatusCode.SUCCESS.getCode(), "查询商品详情成功", dataMap, null);
	}

	/**
	 * 个人用户主页查询
	 */
	@RequestMapping("/findLoginAcHome")
	public Response findLoginAcHome(String token, Integer loginAcId) {
		List<Map<String, Object>> dataMap = null;
		try {
			dataMap = homeService.findLoginAcHomeById(loginAcId);
			actionLogService.addLog(null, ActionLogClass.INFO.getCode(), ActionLogCode.HOME.getCode(), "LM25326", null,
					"个人用户主页查询成功");
		} catch (Exception e) {
			MainUtilityTools.catchException(e, this.getClass(), "个人用户主页查询失败");
			Response res = new Response();
			res.setStatus(ResponseStatusCode.EXCEPTION.getCode());
			res.setObject(dataMap);
			res.setMessage(localeMsgService.getMessage("query.exception"));
			return res;
		}
		return new Response(ResponseStatusCode.SUCCESS.getCode(), "个人用户主页查询成功", dataMap, null);
	}

	/**
	 * 关注
	 * 
	 * @param token
	 * @param fLoginAcId
	 * @return
	 */
	@RequestMapping("/myFollowed")
	public Response myFollowed(String token, Integer fLoginAcId) {
		Integer loginAcId = Integer.valueOf(verifiCodeService.getRedisMap(token, "loginAccoutId"));
		try {
			homeService.myFollowed(loginAcId, fLoginAcId);
			actionLogService.addLog(null, ActionLogClass.INFO.getCode(), ActionLogCode.HOME.getCode(), "LM25328", null,
					"关注成功");
		} catch (Exception e) {
			MainUtilityTools.catchException(e, this.getClass(), "关注失败");
			Response res = new Response();
			res.setStatus(ResponseStatusCode.EXCEPTION.getCode());
			res.setMessage(localeMsgService.getMessage("query.exception"));
			return res;
		}
		return new Response(ResponseStatusCode.SUCCESS.getCode(), "关注成功", null, null);
	}

	/**
	 * 查新我的关注
	 * 
	 * @param token
	 * @return
	 */
	@RequestMapping("/findMyFollowed")
	public Response findMyFollowed(String token) {
		List<Map<String, Object>> dataList = null;
		Integer loginAcId = Integer.valueOf(verifiCodeService.getRedisMap(token, "loginAccoutId"));
		try {
			dataList = homeService.findMyFollowed(loginAcId);
			actionLogService.addLog(null, ActionLogClass.INFO.getCode(), ActionLogCode.HOME.getCode(), "LM25331", null,
					"查询我的关注成功");
		} catch (Exception e) {
			MainUtilityTools.catchException(e, this.getClass(), "查询我的关注失败");
			Response res = new Response();
			res.setStatus(ResponseStatusCode.EXCEPTION.getCode());
			res.setObject(dataList);
			res.setMessage(localeMsgService.getMessage("query.exception"));
			return res;
		}
		return new Response(ResponseStatusCode.SUCCESS.getCode(), "查询我的关注成功", dataList, null);
	}

	/**
	 * 取消关注
	 * 
	 * @param token
	 * @param fLoginAcId
	 * @return
	 */
	@RequestMapping("/cancelFollowed")
	public Response cancelFollowed(String token, Integer fLoginAcId) {
		Integer loginAcId = Integer.valueOf(verifiCodeService.getRedisMap(token, "loginAccoutId"));
		try {
			homeService.cancelFollowed(loginAcId, fLoginAcId);
			actionLogService.addLog(null, ActionLogClass.INFO.getCode(), ActionLogCode.HOME.getCode(), "LM25334", null,
					"取消关注成功");
		} catch (Exception e) {
			MainUtilityTools.catchException(e, this.getClass(), "取消关注失败");
			Response res = new Response();
			res.setStatus(ResponseStatusCode.EXCEPTION.getCode());
			res.setMessage(localeMsgService.getMessage("query.exception"));
			return res;
		}
		return new Response(ResponseStatusCode.SUCCESS.getCode(), "取消关注成功", null, null);
	}

	/**
	 * 查询我的足迹
	 * 
	 * @param token
	 * @return
	 */
	@RequestMapping("/findMyTrack")
	public Response findMyTrack(String token) {
		List<Map<String, Object>> dataMap = null;
		Integer loginAcId = Integer.valueOf(verifiCodeService.getRedisMap(token, "loginAccoutId"));
		try {
			dataMap = homeService.findMyTrack(loginAcId);
			actionLogService.addLog(null, ActionLogClass.INFO.getCode(), ActionLogCode.HOME.getCode(), "LM25356", null,
					"查询我的足迹成功");
		} catch (Exception e) {
			MainUtilityTools.catchException(e, this.getClass(), "查询我的足迹失败");
			Response res = new Response();
			res.setStatus(ResponseStatusCode.EXCEPTION.getCode());
			res.setObject(dataMap);
			res.setMessage(localeMsgService.getMessage("query.exception"));
			return res;
		}
		return new Response(ResponseStatusCode.SUCCESS.getCode(), "查询我的足迹成功", dataMap, null);
	}

	/**
	 * 删除我的足迹
	 * 
	 * @param token
	 * @param id
	 * @return
	 */
	@RequestMapping("/delMyTrack")
	public Response delMyTrack(String token, String id) {
		try {
			homeService.delMyTrack(id);
			actionLogService.addLog(null, ActionLogClass.INFO.getCode(), ActionLogCode.HOME.getCode(), "LM25357", null,
					"删除我的足迹成功");
		} catch (Exception e) {
			MainUtilityTools.catchException(e, this.getClass(), "删除我的足迹失败");
			Response res = new Response();
			res.setStatus(ResponseStatusCode.EXCEPTION.getCode());
			res.setMessage(localeMsgService.getMessage("delete.exception"));
			return res;
		}
		return new Response(ResponseStatusCode.SUCCESS.getCode(), "删除我的足迹成功", null, null);
	}

	/**
	 * 查询我的喜好
	 * 
	 * @param token
	 * @return
	 */
	@RequestMapping("/findMyLikes")
	public Response findMyLikes(String token) {
		List<Map<String, Object>> dataMap = null;
		String loginAcId = verifiCodeService.getRedisMap(token, "loginAccoutId");
		try {
			dataMap = homeService.findMyLikes(loginAcId);
			actionLogService.addLog(null, ActionLogClass.INFO.getCode(), ActionLogCode.HOME.getCode(), "LM25356", null,
					"查询我的喜好成功");
		} catch (Exception e) {
			MainUtilityTools.catchException(e, this.getClass(), "查询我的喜好失败");
			Response res = new Response();
			res.setStatus(ResponseStatusCode.EXCEPTION.getCode());
			res.setObject(dataMap);
			res.setMessage(localeMsgService.getMessage("query.exception"));
			return res;
		}
		return new Response(ResponseStatusCode.SUCCESS.getCode(), "查询我的喜好成功", dataMap, null);
	}

	/**
	 * 修改我的喜好
	 * 
	 * @param token
	 * @param interests
	 * @return
	 */
	@RequestMapping("/modMyLikes")
	public Response modMyLikes(String token, @RequestBody List<Interest> interests) {
		try {
			homeService.addMyLikes(interests);
			actionLogService.addLog(null, ActionLogClass.INFO.getCode(), ActionLogCode.HOME.getCode(), "LM25356", null,
					"修改我的喜好成功");
		} catch (Exception e) {
			MainUtilityTools.catchException(e, this.getClass(), "修改我的喜好失败");
			Response res = new Response();
			res.setStatus(ResponseStatusCode.EXCEPTION.getCode());
			res.setMessage(localeMsgService.getMessage("query.exception"));
			return res;
		}
		return new Response(ResponseStatusCode.SUCCESS.getCode(), "修改我的喜好成功", null, null);
	}

	/**
	 * 判断账户是否已认证
	 * 
	 * @param token
	 * @return
	 */
	@RequestMapping("/isValidAccount")
	public Response isValidAccount(String token) {
		Integer loginAcId = Integer.valueOf(verifiCodeService.getRedisMap(token, "loginAccoutId"));
		Map<String, Object> validMap = null;
		try {
			validMap = homeService.isValidAccount(loginAcId);
			if (!Boolean.parseBoolean(validMap.get("personalValid").toString())) {
				actionLogService.addLog(null, ActionLogClass.INFO.getCode(), ActionLogCode.HOME.getCode(), "LM25356",
						null, "个人验证未通过");
				return new Response(ResponseStatusCode.SUCCESS.getCode(), "个人验证未通过", validMap, null);
			} else if (!Boolean.parseBoolean(validMap.get("enterpriceValid").toString())) {
				actionLogService.addLog(null, ActionLogClass.INFO.getCode(), ActionLogCode.HOME.getCode(), "LM25356",
						null, "企业验证未通过");
				return new Response(ResponseStatusCode.SUCCESS.getCode(), "企业验证未通过", validMap, null);
			}
			actionLogService.addLog(null, ActionLogClass.INFO.getCode(), ActionLogCode.HOME.getCode(), "LM25356", null,
					"判断账户是否已认证成功");
		} catch (Exception e) {
			MainUtilityTools.catchException(e, this.getClass(), "判断账户是否已认证失败");
			Response res = new Response();
			res.setStatus(ResponseStatusCode.EXCEPTION.getCode());
			res.setObject(validMap);
			res.setMessage(localeMsgService.getMessage("query.exception"));
			return res;
		}
		return new Response(ResponseStatusCode.SUCCESS.getCode(), "判断账户是否已认证成功", validMap, null);
	}

	/**
	 * 确认付款
	 */

	/**
	 * 个人身份认证
	 */
	@RequestMapping("/personalAuth")
	public Response personalAuth(String token, String name, String idNo, MultipartFile file1, MultipartFile file2) {
		try {
			// String fileURl = fileUtil.uploadFile(file1.getInputStream());
			// String fileURl2 = fileUtil.uploadFile(file2.getInputStream());
			// homeService.personalAuth(new User(name,idNo,fileURl,fileURl2));
		} catch (Exception e) {
			MainUtilityTools.catchException(e, this.getClass(), "个人认证失败");
			Response res = new Response();
			res.setStatus(ResponseStatusCode.EXCEPTION.getCode());
			res.setMessage(localeMsgService.getMessage("personalAuth.exception"));
			return res;
		}
		return new Response(ResponseStatusCode.SUCCESS.getCode(), "个人认证成功", null, null);
	}

	/**
	 * 消息-通知查询接口
	 */

	/**
	 * 消息-订单消息查询接口
	 */

}
